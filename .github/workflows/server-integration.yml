# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Umshini Server Integration

on:
  push:
    branches: [ "master" ]
  pull_request:

permissions:
  contents: read

env:
  DEBUG: "TRUE"
  SECRET_KEY: BANANA
  SENDGRID_API_KEY: BANANA

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        env_name: ["connect_four_v3", "go_v5"] # "texas_holdem_no_limit_v6"
    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: password
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e '.[all,testing]'
        AutoROM --accept-license
    - name: Install Umshini-Server using private key
      run: |
        eval `ssh-agent -s`
        ssh-add - <<< '${{ secrets.PRIVATE_SSH_KEY }}'
        git clone git@github.com:Umshini/Umshini-Server.git
        cd Umshini-Server && pip install -e .
    - name: Run servers
      run: |
        python -m umshini_server.server.create_test_db --test
        python -m umshini_server.server.run_admin &
        python -m umshini_server.server.standalone_game_server &
        python -m umshini_server.server.tournament_matchmaker -e ${{ matrix.env_name }} -p 4 &
        pytest -v tests/test_umshini_client.py --env_name ${{ matrix.env_name }}
        pytest -v
    - name: Upload coverage
      uses: actions/upload-artifact@v2
      with:
        name: coverage${{ matrix.group }}
        path: .coverage
  coverage:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: 3.10
      - name: Download all artifacts
        # Downloads coverage1, coverage2, etc.
        uses: actions/download-artifact@v2
      - name: Run coverage
        run: |
          coverage combine coverage*/.coverage*
          coverage report
      - uses: codecov/codecov-action@v3
